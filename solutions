1)
var arg = process.argv[2];
console.log(`Hello ${arg}`);


2 class)
class Character {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.health_ = 100;
  }
  damage() {
    this.health_ -= 10;
  }
  getHealth() {
    return this.health_;
  }
  toString() {
    return "x: " + this.x + " y: " + this.y + " health: " + this.health_;
  }
}

var x = process.argv[2];
var y = process.argv[3];
var character = new Character(+x, +y);
character.damage();
console.log(character.toString());

3 class extend)
'use strict';

class Character {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.health_ = 100;
  }
  damage() {
    this.health_ -= 10;
  }
  getHealth() {
    return this.health_;
  }
  toString() {
    return "x: " + this.x + " y: " + this.y + " health: " + this.health_;
  }
}

class Player extends Character {
  constructor(x, y, name) {
    super(x, y);
    this.name = name;
  }
  move(dx, dy) {
    this.x += dx;
    this.y += dy;
  }
  toString() {
    return "name: " + this.name + " " + super.toString();
  }
}

var x = process.argv[2];
var y = process.argv[3];
var name = process.argv[4];
var character = new Character(+x, +y);
character.damage();
console.log(character.toString());
var player = new Player(+x, +y, name);
player.damage();
player.move(7, 8);
console.log(player.toString());

4 modules)
solution-math.js:

    export const PI = 3.141592;

    var _sqrt = function(s, x, last){
      return x != last ? _sqrt(s, (x + s / x) / 2.0, x) : x;
    };
    export function sqrt(s){
      return _sqrt(s, s/2.0, 0.0);
    };
    export function square(x) {
      return x * x;
    };

────────────────────────────────────────────────────────────────
solution.js:

    var arg1 = process.argv[2];
    var arg2 = process.argv[3];

    import {PI, sqrt, square} from './solution-math';
    console.log(PI);
    console.log(sqrt(+arg1));
    console.log(square(+arg2));

5 module default)
solution-math.js:

    const PI = 3.141592;

    var _sqrt = function(s, x, last){
      return x != last ? _sqrt(s, (x + s / x) / 2.0, x) : x;
    };
    function sqrt(s){
      return _sqrt(s, s/2.0, 0.0);
    };
    function square(x) {
      return x * x;
    };

    export default {
      PI: PI,
      square: square,
      sqrt: sqrt
    };

────────────────────────────────────────────────────────────────────────────────
solution.js:

    var arg1 = process.argv[2];
    var arg2 = process.argv[3];

    import Math from './solution-math';
    console.log(Math.PI);
    console.log(Math.sqrt(+arg1));
    console.log(Math.square(+arg2));

6) computed property:
console.log({
  [+process.argv[2] % 2 === 0 ? "even" : "odd"]: +process.argv[2],
  [+process.argv[2] + +process.argv[3]]: +process.argv[2] + +process.argv[3],
});

7) for of iteration
const max = +process.argv[2];
let FizzBuzz = {
  [Symbol.iterator]() {
    let num = 1;
    return {
      next() {
        if (num > max) {
          return { done: true };
        }
        let value = num;
        if (value % 15 === 0) {
          value = 'FizzBuzz';
        } else if (value % 3 === 0) {
          value = 'Fizz';
        } else if (value % 5 === 0) {
          value = 'Buzz';
        }
        num++;
        return { done: false, value: value };
      }
    }
  }
}

for (var n of FizzBuzz) {
  console.log(n);
}

8) 
